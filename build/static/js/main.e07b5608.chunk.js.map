{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","id","baseUrl","fetch","method","then","data","json","newObj","body","JSON","stringify","headers","res","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","setErrorMessage","useEffect","noteService","catch","err","console","log","showNotes","filter","map","find","n","changedNote","setTimeout","toggleImportanceOf","onSubmit","e","preventDefault","NoteObj","date","Date","toLocaleDateString","Math","random","concat","value","onChange","event","target","type","ReactDOM","render","document","getElementById"],"mappings":"6LAceA,EAZF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACjB,qBAAuB,iBAEzB,OACE,qBAAIC,UAAU,OAAd,UACGJ,EAAKK,QACN,wBAAsBC,QAASL,EAA/B,SAAkDC,GAArCF,EAAKO,MAFMP,EAAKO,KCP7BC,EAAO,aAwBE,EAtBA,WAEX,OADgBC,MAAMD,EAAS,CAACE,OAAQ,QACzBC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,WAoBtB,EAjBA,SAAAC,GAMX,OALgBL,MAAMD,EAAS,CAC3BE,OAAQ,OACRK,KAAMC,KAAKC,UAAUH,GACrBI,QAAS,CAAC,eAAe,sBAEdP,MAAK,SAAAC,GAAI,OAAIA,EAAKC,WAWtB,EARA,SAACN,EAAIO,GAIhB,OAHgBL,MAAM,GAAD,OAAID,EAAJ,YAAeD,GAAM,CAACG,OAAO,MAAOK,KAAMC,KAAKC,UAAUH,GAASI,QAAQ,CAC3F,eAAgB,sBAELP,MAAK,SAAAQ,GAAG,OAAIA,EAAIN,WC0DpBO,EA1EH,WACV,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAwCN,mBAAS,0BAAjD,mBAAqBO,GAArB,WAIAC,qBAAU,WACRC,IAAqBnB,MAAK,SAAAQ,GAAG,OAAII,EAASJ,MAAMY,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QACxE,IAGH,IAkCMG,EAAYT,EAAUJ,EAAQA,EAAMc,QAAO,SAAApC,GAAI,OAAIA,EAAKG,aAO9D,OACE,gCACE,uCACA,yBAAQG,QARU,WACpBqB,GAAYD,IAOV,kBACQA,EAAU,YAAc,SAEhC,6BACGS,EAAUE,KAAI,SAAArC,GAAI,OACf,cAAC,EAAD,CAAoBA,KAAMA,EACzBC,iBAAkB,kBA9BF,SAACM,GAC1B,IAAMP,EAAOsB,EAAMgB,MAAK,SAAAC,GAAC,OAAIA,EAAEhC,KAAOA,KAChCiC,EAAW,2BAAQxC,GAAR,IAAcG,WAAYH,EAAKG,YAChD2B,EAAmBvB,EAAIiC,GAAa7B,MAAK,SAAAC,GACvCW,EAASD,EAAMe,KAAI,SAAArC,GAAI,OAAIA,EAAKO,KAAOA,EAAKP,EAAKY,SAChDmB,OAAM,SAAAC,GACPJ,EAAgB,QAAD,OAAS5B,EAAKK,QAAd,sCACfoC,YAAW,WACTb,EAAgB,QAChB,KACJL,EAASD,EAAMc,QAAO,SAAAG,GAAC,OAAIA,EAAEhC,KAAOA,SAoBHmC,CAAmB1C,EAAKO,MADtCP,EAAKO,SAItB,uBAAMoC,SArDY,SAACC,GACrBA,EAAEC,iBACF,IAAMC,EAAU,CACdzC,QAASmB,EACTuB,MAAM,IAAIC,MAAOC,qBACjB9C,UAAW+C,KAAKC,SAAW,IAE7BrB,EAAmBgB,GAClBnC,MAAK,SAAAE,GAEJU,EAASD,EAAM8B,OAAON,IACtBrB,EAAW,OAEZM,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,OAwCxB,UACE,uBAAOqB,MAAO7B,EAAS8B,SAtCT,SAACC,GACnB9B,EAAW8B,EAAMC,OAAOH,UAsCpB,wBAAQI,KAAK,SAAb,6B,MCpERC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.e07b5608.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important \n  ? 'make not important' : 'make important'\n  \n  return (\n    <li className='note' key={note.id}>\n      {note.content}\n      <button key={note.id} onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note","const baseUrl = `/api/notes`\n\nconst getAll = () => {\n    const request = fetch(baseUrl, {method: 'GET'})\n    return request.then(data => data.json())\n}\n\nconst create = newObj => {\n    const request = fetch(baseUrl, {\n        method: 'POST',\n        body: JSON.stringify(newObj),\n        headers: {'Content-Type':'application/json'}\n    })\n    return request.then(data => data.json())\n}\n\nconst update = (id, newObj) => {\n    const request = fetch(`${baseUrl}/${id}`, {method:'PUT', body: JSON.stringify(newObj), headers:{\n        'Content-Type': 'application/json'}})\n    \n    return request.then(res => res.json())\n}\n\n\nexport default { getAll, create, update }","import React, { useEffect, useState } from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState('some error occurred...')\n\n  //useEffect allows you to manipulate DOM renders outside of re-rendering\n  // This will fetch the data from the json server\n  useEffect(() => {\n    noteService.getAll().then(res => setNotes(res)).catch(err => console.log(err))\n  }, [])\n\n  // This will create a new note object then use fetch to POST the new note \n  const handleNewNote = (e) => {\n    e.preventDefault()\n    const NoteObj = {\n      content: newNote,\n      date: new Date().toLocaleDateString(),\n      important: Math.random() < 0.5\n    }\n    noteService.create(NoteObj)\n    .then(json => {\n      // Cannot forget to update the state or else it won't show up on screen\n      setNotes(notes.concat(NoteObj))\n      setNewNote('')\n    })\n    .catch(err => console.log(err))\n  }\n  \n  const newNoteForm = (event) => {\n    setNewNote(event.target.value)\n  }\n  \n  const toggleImportanceOf = (id) => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n    noteService.update(id, changedNote).then(data => {\n      setNotes(notes.map(note => note.id !== id ? note:data))\n    }).catch(err => {\n      setErrorMessage(`Note ${note.content} was already removed from server.`)\n      setTimeout(() => {\n        setErrorMessage(null)\n      },5000)\n    setNotes(notes.filter(n => n.id !== id))\n    })\n  }\n  \n  const showNotes = showAll ? notes : notes.filter(note => note.important)\n  \n  const showImportant = () => {\n    setShowAll(!showAll)\n  }\n  \n  \n  return (\n    <div>\n      <h1>Notes</h1>\n      <button onClick={showImportant}>\n        show {showAll ? 'important' : 'all'}\n      </button>\n      <ul>\n        {showNotes.map(note => \n            <Note key={note.id} note={note}\n             toggleImportance={() => toggleImportanceOf(note.id)} />\n        )}\n      </ul>\n      <form onSubmit={handleNewNote}>\n        <input value={newNote} onChange={newNoteForm} />\n        <button type='submit'>Add Note</button>\n      </form>\n    </div>\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App.js'\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}